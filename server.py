import tkinter as tk
from tkinter import ttk, messagebox
import random
import string
import openpyxl
from datetime import datetime
import pyperclip
xlsx_filename = "keys.xlsx"

class BackendApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Backend GUI")
        create_key_button = tk.Button(self.master, text="Create Key", command=self.create_key)
        create_key_button.pack()
        columns = ["Key", "Machine Code", "Used", "Creation Time", "Generated By", "F/T"]
        self.tree = ttk.Treeview(self.master, columns=columns, show="headings")
        for col in columns:
            self.tree.heading(col, text=col)
        self.tree.pack()
        delete_key_button = tk.Button(self.master, text="Delete Key", command=self.delete_key)
        delete_key_button.pack()
        copy_key_button = tk.Button(self.master, text="Copy Key", command=self.copy_key)
        copy_key_button.pack()
        refresh_button = tk.Button(self.master, text="Refresh", command=self.refresh_key_list)
        refresh_button.pack()
        self.refresh_key_list()

    def create_key(self):
        key = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
        creation_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        generated_by = "{backend}"
        messagebox.showinfo("Create Key", f"New Key: {key}\nCreation Time: {creation_time}")
        self.generate_and_store_key(key, creation_time, generated_by)
        self.refresh_key_list()

    def delete_key(self):
        selected_item = self.tree.selection()
        if selected_item:
            api_key = self.tree.item(selected_item, 'values')[0]
            confirm_delete = messagebox.askokcancel("Confirm Delete", f"Do you really want to delete key: {api_key}?")

            if confirm_delete:
                self.delete_key_from_file(api_key)
                self.refresh_key_list()

    def copy_key(self):
        selected_item = self.tree.selection()
        if selected_item:
            key_to_copy = self.tree.item(selected_item, 'values')[0]
            pyperclip.copy(key_to_copy)

    def refresh_key_list(self):
        self.tree.delete(*self.tree.get_children())
        try:
            workbook = openpyxl.load_workbook(xlsx_filename)
            sheet = workbook.active
            for row in sheet.iter_rows(values_only=True):
                if row and len(row) >= 5 and row[0]:
                    self.tree.insert("", "end", values=(row[0], row[1], row[2], row[3], row[4], row[5]))
            workbook.close()
        except FileNotFoundError:
            print("Excel file does not exist.")
        except Exception as e:
            print(f"An error occurred: {e}")

    def generate_and_store_key(self, key, creation_time, generated_by):
        try:
            workbook = openpyxl.load_workbook(xlsx_filename)
        except FileNotFoundError:
            workbook = openpyxl.Workbook()

        sheet = workbook.active
        sheet.append([key, "", "", creation_time, generated_by, "{false}"])  # Add {false} to the sixth column

        workbook.save(xlsx_filename)
        workbook.close()

    def delete_key_from_file(self, api_key):
        try:
            workbook = openpyxl.load_workbook(xlsx_filename)
            sheet = workbook.active

            for row in sheet.iter_rows():
                if row and row[0].value == api_key:
                    sheet.delete_rows(row[0].row)

            workbook.save(xlsx_filename)
            workbook.close()
        except Exception as e:
            print(f"An error occurred while deleting the key: {e}")


if __name__ == "__main__":
    root = tk.Tk()
    app = BackendApp(root)
    root.mainloop()

